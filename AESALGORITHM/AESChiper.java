/**
 * file: AESChiper.java 
 * author: SivaChintapalli 
 * course: MSCS_630L_231_16S
 * assignment: Lab 2 
 * due date: March 31, 2016 
 * version: 1.0
 * This file contains the methods to perform the operations of AES Algorithm
 */
import java.util.HashMap;
/**
 * AESCipher
 * AESCipher class perform the operations and generates the round keys and shift 
 * operation, nibble Substitution and mixColums
 * @author SIVARAMAKRISHNAPRASA
 */
public class AESChiper {

  static HashMap<Integer, Integer> sBox = new HashMap();
  static HashMap<Integer, String> roundkeys = new HashMap();
  //storing the lookup table of S-box in to SboxArray
  static Integer[] sBoxArray = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
  };

  //Rcon stores the round constant look up table
  static Integer[] rCon = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
  };
  /**
   * Galois look up table for the multiplication by 2
   */
  public static int[][] multiplyby2 = {
    {0x00, 0x02, 0x04, 0x06, 0x08, 0x0a, 0x0c, 0x0e, 0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e},
    {0x20, 0x22, 0x24, 0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 0x3c, 0x3e},
    {0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e},
    {0x60, 0x62, 0x64, 0x66, 0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 0x7e},
    {0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e},
    {0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe},
    {0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 0xd6, 0xd8, 0xda, 0xdc, 0xde},
    {0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe},
    {0x1b, 0x19, 0x1f, 0x1d, 0x13, 0x11, 0x17, 0x15, 0x0b, 0x09, 0x0f, 0x0d, 0x03, 0x01, 0x07, 0x05},
    {0x3b, 0x39, 0x3f, 0x3d, 0x33, 0x31, 0x37, 0x35, 0x2b, 0x29, 0x2f, 0x2d, 0x23, 0x21, 0x27, 0x25},
    {0x5b, 0x59, 0x5f, 0x5d, 0x53, 0x51, 0x57, 0x55, 0x4b, 0x49, 0x4f, 0x4d, 0x43, 0x41, 0x47, 0x45},
    {0x7b, 0x79, 0x7f, 0x7d, 0x73, 0x71, 0x77, 0x75, 0x6b, 0x69, 0x6f, 0x6d, 0x63, 0x61, 0x67, 0x65},
    {0x9b, 0x99, 0x9f, 0x9d, 0x93, 0x91, 0x97, 0x95, 0x8b, 0x89, 0x8f, 0x8d, 0x83, 0x81, 0x87, 0x85},
    {0xbb, 0xb9, 0xbf, 0xbd, 0xb3, 0xb1, 0xb7, 0xb5, 0xab, 0xa9, 0xaf, 0xad, 0xa3, 0xa1, 0xa7, 0xa5},
    {0xdb, 0xd9, 0xdf, 0xdd, 0xd3, 0xd1, 0xd7, 0xd5, 0xcb, 0xc9, 0xcf, 0xcd, 0xc3, 0xc1, 0xc7, 0xc5},
    {0xfb, 0xf9, 0xff, 0xfd, 0xf3, 0xf1, 0xf7, 0xf5, 0xeb, 0xe9, 0xef, 0xed, 0xe3, 0xe1, 0xe7, 0xe5}};

  /**
   * Galois look up table for the multiplication by 3
   */
  public static int[][] multiplyby3 = {
    {0x00, 0x03, 0x06, 0x05, 0x0c, 0x0f, 0x0a, 0x09, 0x18, 0x1b, 0x1e, 0x1d, 0x14, 0x17, 0x12, 0x11},
    {0x30, 0x33, 0x36, 0x35, 0x3c, 0x3f, 0x3a, 0x39, 0x28, 0x2b, 0x2e, 0x2d, 0x24, 0x27, 0x22, 0x21},
    {0x60, 0x63, 0x66, 0x65, 0x6c, 0x6f, 0x6a, 0x69, 0x78, 0x7b, 0x7e, 0x7d, 0x74, 0x77, 0x72, 0x71},
    {0x50, 0x53, 0x56, 0x55, 0x5c, 0x5f, 0x5a, 0x59, 0x48, 0x4b, 0x4e, 0x4d, 0x44, 0x47, 0x42, 0x41},
    {0xc0, 0xc3, 0xc6, 0xc5, 0xcc, 0xcf, 0xca, 0xc9, 0xd8, 0xdb, 0xde, 0xdd, 0xd4, 0xd7, 0xd2, 0xd1},
    {0xf0, 0xf3, 0xf6, 0xf5, 0xfc, 0xff, 0xfa, 0xf9, 0xe8, 0xeb, 0xee, 0xed, 0xe4, 0xe7, 0xe2, 0xe1},
    {0xa0, 0xa3, 0xa6, 0xa5, 0xac, 0xaf, 0xaa, 0xa9, 0xb8, 0xbb, 0xbe, 0xbd, 0xb4, 0xb7, 0xb2, 0xb1},
    {0x90, 0x93, 0x96, 0x95, 0x9c, 0x9f, 0x9a, 0x99, 0x88, 0x8b, 0x8e, 0x8d, 0x84, 0x87, 0x82, 0x81},
    {0x9b, 0x98, 0x9d, 0x9e, 0x97, 0x94, 0x91, 0x92, 0x83, 0x80, 0x85, 0x86, 0x8f, 0x8c, 0x89, 0x8a},
    {0xab, 0xa8, 0xad, 0xae, 0xa7, 0xa4, 0xa1, 0xa2, 0xb3, 0xb0, 0xb5, 0xb6, 0xbf, 0xbc, 0xb9, 0xba},
    {0xfb, 0xf8, 0xfd, 0xfe, 0xf7, 0xf4, 0xf1, 0xf2, 0xe3, 0xe0, 0xe5, 0xe6, 0xef, 0xec, 0xe9, 0xea},
    {0xcb, 0xc8, 0xcd, 0xce, 0xc7, 0xc4, 0xc1, 0xc2, 0xd3, 0xd0, 0xd5, 0xd6, 0xdf, 0xdc, 0xd9, 0xda},
    {0x5b, 0x58, 0x5d, 0x5e, 0x57, 0x54, 0x51, 0x52, 0x43, 0x40, 0x45, 0x46, 0x4f, 0x4c, 0x49, 0x4a},
    {0x6b, 0x68, 0x6d, 0x6e, 0x67, 0x64, 0x61, 0x62, 0x73, 0x70, 0x75, 0x76, 0x7f, 0x7c, 0x79, 0x7a},
    {0x3b, 0x38, 0x3d, 0x3e, 0x37, 0x34, 0x31, 0x32, 0x23, 0x20, 0x25, 0x26, 0x2f, 0x2c, 0x29, 0x2a},
    {0x0b, 0x08, 0x0d, 0x0e, 0x07, 0x04, 0x01, 0x02, 0x13, 0x10, 0x15, 0x16, 0x1f, 0x1c, 0x19, 0x1a}};
  /**
   * Galois fields of circulant matrix
   */
  public static int[][] mixColumn = {
    {0x02, 0x03, 0x01, 0x01},
    {0x01, 0x02, 0x03, 0x01},
    {0x01, 0x01, 0x02, 0x03},
    {0x03, 0x01, 0x01, 0x02}
  };

  /**
   * This method is used to return the Hex transformed value of S-box
   *
   * @param inHex is a input for S-box to transform the value
   * @return hexadecimal value from the S-box
   */
  protected Integer aesSBox(Integer inHex) {
    return sBox.get(inHex);
  }

  /**
   * This method returns round constant from R-Con look up table
   *
   * @param round is constant number
   * @return the transformed value from RCOn lookup table
   */
  protected Integer aesRCon(Integer round) {
    return rCon[round];
  }

  /**
   * This method is used to generate 11 round key from the encryption key
   *
   * @param keyHex is the Encryption key
   * @return HashMap with round keys
   */
  public HashMap<Integer, String> aesRoundKey(String keyHex) {
    // storing the sbox values in to HashMap for retriving the values
    for (int i = 0x00; i <= 0xff; i++) {
      sBox.put(i, sBoxArray[i]);
    }

    //storing the input key into ke[4*4] matrix
    Integer[][] ke = aesKey(keyHex);
    // w stores 11 round keys
    Integer[][] W = new Integer[4][44];
    // adding first four rows to W
    for (int j = 0; j < 4; j++) {
      for (int i = 0; i < 4; i++) {
        W[i][j] = ke[j][i];
      }
    }
    // Adding values in to next 40 column 

    for (int j = 4; j < 44; j++) {
      // Array x[4] is used to store the values of j-4 column 
      Integer[] x = new Integer[4];
      // Array y[4] is used to store the values of j-4 column 
      Integer[] y = new Integer[4];
      Integer[] w;

      for (int k = 0; k < 4; k++) {
        //adding the W[k][][j-4] column values in to an array x[4]
        x[k] = W[k][j - 4];
        //adding the W[k][][j-1] column values in to an array y[4]
        y[k] = W[k][j - 1];
      }
      if (j % 4 != 0) {
        w = xor(x, y);

      } else {
        //Wnew is a temporary vector
        Integer[] Wnew = new Integer[4];
        //Left Shifting Wnew by 1
        for (int r = 0; r < 4; r++) {
          int leftShift = r + 1;
          if (r == 3) {
            leftShift = r - 3;
          }
          Wnew[r] = y[leftShift];
        }
        //Transforming Wnew using Sbox
        for (int r = 0; r < 4; r++) {
          Wnew[r] = aesSBox(Wnew[r]);
        }
        //Calculating Round number and storing in RoundNo
        int RoundNo = j / 4;
        //Xoring round constant with Wnew[0]
        Wnew[0] ^= aesRCon(RoundNo);

        w = xor(x, Wnew);

      }
      for (int i = 0; i < 4; i++) {
        W[i][j] = w[i];
      }
    }
    int counter = 1;
    String roundKey = "";
    //Adding the 11 round keys in to HashMap roundKeys
    for (int j = 0; j < 44; j++) {
      for (int i = 0; i < 4; i++) {

        if (counter % 16 == 0) {
          roundKey += String.format("%02X", W[i][j]);
          int round = counter / 16;
          roundkeys.put(round, roundKey);
          roundKey = "";
        } else {
          roundKey += String.format("%02X", W[i][j]);

        }
        counter++;
      }

    }

    return roundkeys;
  }

  /**
   * This method generates hexadecimal key of Encryption key
   *
   * @param key is an encryption key
   * @return a matrix of encryption key in hexadecimal
   */
  protected Integer[][] aesKey(String key) {
    int row = 4;
    int coloumn = 4;
    Integer[][] ke = new Integer[row][coloumn];
    for (int i = 0; i < row; i++) {
      for (int j = 0; j < coloumn; j++) {
        // coping  input key into 4*4 matrix
        String val = String.valueOf(key.charAt((row * i) * 2 + j * 2) + ""
          + key.charAt((row * i) * 2 + j * 2 + 1));
        ke[i][j] = Integer.parseInt(val, 16);
      }
    }
    return ke;

  }

  /*
   * This function bitwise xors elements of two 1D matrices with 4 elements each
   * @param Vector1 is the first matrix
   * @param Vector2 is the second vector
   * @return ResultantVector is the xor result
   */
  protected Integer[] xor(Integer Vector1[], Integer Vector2[]) {
    Integer[] ResultantVector = new Integer[4];
    for (int i = 0; i < 4; i++) {
      ResultantVector[i] = Vector1[i] ^ Vector2[i];
    }
    return ResultantVector;
  }

  /**
   * This method is used to convert the key and message in to the 4*4 matrix
   *
   * @param key is a parameter which will be converting in to matrix form
   * @return ke in the form of Integer 4*4 matrix
   */
  protected Integer[][] matrics(String key) {
    int row = 4;
    int coloumn = 4;
    Integer[][] ke = new Integer[row][coloumn];
    for (int i = 0; i < row; i++) {
      for (int j = 0; j < coloumn; j++) {
        // coping  input key into 4*4 matrix
        String val = String.valueOf(key.charAt((row * i) * 2 + j * 2) + ""
          + key.charAt((row * i) * 2 + j * 2 + 1));
        ke[j][i] = Integer.parseInt(val, 16);
      }
    }
    return ke;

  }

  /**
   * This method is used to perform the XOR operation on round-key and message
   *
   * @param sHex is the message which is need to encrypt
   * @param keyHex is the round key
   * @return xorResult is the XOR result of key and message in Integer 4*4
   * matrix
   */
  protected Integer[][] aesStateXOR(String sHex, String keyHex) {
    Integer[][] key = matrics(keyHex);
    Integer[][] msg = matrics(sHex);
    Integer[] keyTemp = new Integer[4];
    Integer[] msgTemp = new Integer[4];
    Integer[][] xorResult = new Integer[4][4];
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        keyTemp[j] = key[i][j];
        msgTemp[j] = msg[i][j];

      }
      xorResult[i] = xor(keyTemp, msgTemp);
    }
    return xorResult;
  }

  /**
   * This method is used to perform the nibble substitution using S-Box
   *
   * @param inStateHex is the XOR result of the round key and message
   * @return outStateHex which is the result of nibbleSubstution in 4*4 matrix
   */
  protected Integer[][] aesNibbleSub(Integer[][] inStateHex) {
    Integer[][] outStateHex = new Integer[4][4];
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        outStateHex[i][j] = aesSBox(inStateHex[i][j]);
      }
    }
    return outStateHex;
  }

  /**
   * This method is used to perform the left Shifting the values in the matrix
   *
   * @param inStateHex is the result of nibble substitution to perform the shift
   * @return leftShiftMatrics is the result of leftShift of the 4*4 matrix
   */
  protected Integer[][] aesShiftRow(Integer[][] inStateHex) {
    int leftShift;
    Integer[][] leftShiftMatrics = new Integer[4][4];
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        leftShift = j + i;
        if (i == 1 && j == 3) {
          leftShift = j - 3;
        }
        if (i == 2 && j >= 2) {
          leftShift = j - 2;
        }
        if (i == 3 && j >= 1) {
          leftShift = j - 1;
        }
        leftShiftMatrics[i][j] = inStateHex[i][leftShift];
      }
    }
    return leftShiftMatrics;
  }

  /**
   * This method is used to do the mixColumn operation
   *
   * @param array is the Input to perform the mixColumn operation
   * @return tempArray is the result of mixColumn operation
   */
  protected Integer[][] aesMixColumn(Integer[][] array) {
    Integer[][] tempArray = new Integer[4][4];
    String message = "";
    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        tempArray[i][j] = mixColumnCalc(array, mixColumn, i, j);
      }
    }
    return tempArray;
  }

  /**
   * This method help to perform the sum of the values of the multiplication of
   * two values
   *
   * @param array is the AES Left-Shift matrix
   * @param mclmn is Galois matrix
   * @param i is the row value of the Matrix
   * @param j is colum value of the matrix
   * @return sum after performing the multiplication of one row and column of
   * matrices
   */
  protected int mixColumnCalc(Integer[][] array, int[][] mclmn, int i, int j) {
    int sum = 0;
    for (int k = 0; k < 4; k++) {
      int a = mclmn[i][k];
      int b = array[k][j];
      sum ^= mcMultiplication(a, b);
    }
    return sum;

  }

  /**
   * This method helps to multiplying the values by 1,2,3
   *
   * @param a element of Galois matrix
   * @param b element of AES Matrix
   * @return values after multiplication by 1,2,3,0
   */
  protected int mcMultiplication(int a, int b) {
    if (a == 1) {
      return b;
    } else if (a == 2) {
      return multiplyby2[b / 16][b % 16];
    } else if (a == 3) {
      return multiplyby3[b / 16][b % 16];
    }
    return 0;
  }
}
//5468617473206D79204B756E67204675
//54776F204F6E65204E696E652054776F
